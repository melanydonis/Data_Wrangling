---
title: "Repaso"
author: "Melany 20170474"
date: "7/24/2019"
output: html_document
---

# El cache = TRUE hace que los chuncks esten conectados, para no cargar las librerias cada vez  y echo = TRUE para mostrar lo que esta ahi.
# Instalar librerias 
```{r, cache = TRUE, echo = TRUE}
install.packages("dplyr")
install.packages("RMySQL")
install.packages("lubridate")
install.packages("openxlsx")
install.packages("tidyverse")
install.packages("stringr")
install.packages("readr")
```

# si no tuviera dbplyr con require solo me sale que no lo tengo y sigue cargando el codigo, con library deja de cargar cuando sale error.
# Cargar librerias 
```{r}
require(dbplyr)
require(RMySQL)
require(lubridate)
require(openxlsx)
require(tidyverse)
require(stringr)
require(readr)
```

# Tipo de datos
```{r}
string <- "This is a string"
class(string)
nchar(string) #Numero de caracteres
length(string) #Longitud del vector
```
```{r}
number <-234L #L sirve para definir que es un numero entero
class(number)
typeof(number)
```
```{r}
logical <- FALSE #vectores logicos sirven para escoger filas de tablas
logical
logical*1
```
```{r}
factor_1 <- c("Mon", "Tue", "Mon", "Wed", "Thu", "Fri", "Sat", "Sun", "Wed", "Thu")
factor_1 <- factor(factor_1)
factor_1
as.numeric(factor_1) #label enconding
```
```{r}
factor_2 <- c("Mon", "Tue", "Mon", "Wed", "Thu", "Fri", "Sat", "Sun", "Wed", "Thu")
factor_2 <- ordered(factor_2, levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
factor_2
```

# Vectors
```{r}
sample (x= 1:100, size = 8, replace =FALSE) # replace = false no repite los numeros
sample (x= 1:5, size = 8, replace =TRUE)
vector_1 <- c(1:5, "A") #Con el A vuelve los numeros a string, pero el A no puede convertirse a int
vector_1
c(vector_1, "B", "C", "D")
as.logical(vector_1)
```

#Listas
```{r}
vector_1 <- c(1,2,3,4,5)
vector_2 <- c(FALSE,TRUE,FALSE)
list_1 <- list(vector_1, vector_2)
names(list_1) <- c("first", "second")
list_1$second[2]
```

# Matrices
```{r, cache = True}
matrix(data = 1, nrow = 4, ncol = 5)
vector_5 <- c(1:5)
vector_6 <- c(6:10)
vector_7 <- c(11:15)
matrix_1 <- cbind(vector_5, vector_6, vector_7)
matrix_1
```

# Data Frames
```{r, cache=TRUE}
df <- data.frame(
  col1 = c("This", "is", "a", "vector", "of", "strings"),
  col2 = 1:6,
  col3 = letters[1:6],
  stringsAsFactors = FALSE
)
df
nrow(df)
ncol(df)
str(df)
names(df)
length(df)
dim(df) #Dimensiones del df
head(df)
tail(df)
```

#Funciones BaseR
```{r, cache = TRUE}
df$Column4 <- 11:16
new_elements <- c("new_string", 19, "z")
df <- rbind(df, new_elements)
df_copy <- rbind(df_copy, new_elements)
df
```

